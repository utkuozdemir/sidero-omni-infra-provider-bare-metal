// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: provider/provider.proto

package providerpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProviderService_ProvisionMachine_FullMethodName   = "/management.ProviderService/ProvisionMachine"
	ProviderService_DeprovisionMachine_FullMethodName = "/management.ProviderService/DeprovisionMachine"
	ProviderService_PowerOnMachine_FullMethodName     = "/management.ProviderService/PowerOnMachine"
)

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServiceClient interface {
	ProvisionMachine(ctx context.Context, in *ProvisionMachineRequest, opts ...grpc.CallOption) (*ProvisionMachineResponse, error)
	DeprovisionMachine(ctx context.Context, in *DeprovisionMachineRequest, opts ...grpc.CallOption) (*DeprovisionMachineResponse, error)
	PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*PowerOnMachineResponse, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) ProvisionMachine(ctx context.Context, in *ProvisionMachineRequest, opts ...grpc.CallOption) (*ProvisionMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionMachineResponse)
	err := c.cc.Invoke(ctx, ProviderService_ProvisionMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) DeprovisionMachine(ctx context.Context, in *DeprovisionMachineRequest, opts ...grpc.CallOption) (*DeprovisionMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeprovisionMachineResponse)
	err := c.cc.Invoke(ctx, ProviderService_DeprovisionMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*PowerOnMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PowerOnMachineResponse)
	err := c.cc.Invoke(ctx, ProviderService_PowerOnMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations must embed UnimplementedProviderServiceServer
// for forward compatibility.
type ProviderServiceServer interface {
	ProvisionMachine(context.Context, *ProvisionMachineRequest) (*ProvisionMachineResponse, error)
	DeprovisionMachine(context.Context, *DeprovisionMachineRequest) (*DeprovisionMachineResponse, error)
	PowerOnMachine(context.Context, *PowerOnMachineRequest) (*PowerOnMachineResponse, error)
	mustEmbedUnimplementedProviderServiceServer()
}

// UnimplementedProviderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderServiceServer struct{}

func (UnimplementedProviderServiceServer) ProvisionMachine(context.Context, *ProvisionMachineRequest) (*ProvisionMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionMachine not implemented")
}
func (UnimplementedProviderServiceServer) DeprovisionMachine(context.Context, *DeprovisionMachineRequest) (*DeprovisionMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprovisionMachine not implemented")
}
func (UnimplementedProviderServiceServer) PowerOnMachine(context.Context, *PowerOnMachineRequest) (*PowerOnMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOnMachine not implemented")
}
func (UnimplementedProviderServiceServer) mustEmbedUnimplementedProviderServiceServer() {}
func (UnimplementedProviderServiceServer) testEmbeddedByValue()                         {}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_ProvisionMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).ProvisionMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_ProvisionMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).ProvisionMachine(ctx, req.(*ProvisionMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_DeprovisionMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprovisionMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).DeprovisionMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_DeprovisionMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).DeprovisionMachine(ctx, req.(*DeprovisionMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_PowerOnMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOnMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).PowerOnMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_PowerOnMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).PowerOnMachine(ctx, req.(*PowerOnMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionMachine",
			Handler:    _ProviderService_ProvisionMachine_Handler,
		},
		{
			MethodName: "DeprovisionMachine",
			Handler:    _ProviderService_DeprovisionMachine_Handler,
		},
		{
			MethodName: "PowerOnMachine",
			Handler:    _ProviderService_PowerOnMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider/provider.proto",
}
